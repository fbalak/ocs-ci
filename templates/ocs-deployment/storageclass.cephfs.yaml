---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ storageclass_name | default('ocsci-cephfs-storageclass') }}
provisioner: {{ provisioner | default('ceph.rook.io/block') }}
parameters:
  # Comma separated list of Ceph monitors
  # if using FQDN, make sure csi plugin's dns policy is appropriate.  
  monitors: {{ monitors }}

  # For provisionVolume: "true":
  #   A new volume will be created along with a new Ceph user.
  #   Requires admin credentials (adminID, adminKey).
  # For provisionVolume: "false":
  #   It is assumed the volume already exists and the user is expected
  #   to provide path to that volume (rootPath) and user credentials (userID, userKey).
  provisionVolume: {{ provision_volume | default('true') }}

  # Ceph pool into which the volume shall be created
  # Required for provisionVolume: "true"
  pool: {{ ceph_pool | default(null) }}

  # Root path of an existing CephFS volume
  # Required for provisionVolume: "false"
  # rootPath: /absolute/path

  # The secrets have to contain user and/or Ceph admin credentials.
  csi.storage.k8s.io/provisioner-secret-name: {{ provisioner_secret_name }}
  csi.storage.k8s.io/provisioner-secret-namespace: {{ provisioner_secret_namespace | default('default') }}
  csi.storage.k8s.io/node-stage-secret-name: {{ node_stage_secret_name }}
  csi.storage.k8s.io/node-stage-secret-namespace: {{ node_stage_secret_namespace | default('default') }}

  # (optional) The driver can use either ceph-fuse (fuse) or ceph kernel client (kernel)
  # If omitted, default volume mounter will be used - this is determined by probing for ceph-fuse
  # or by setting the default mounter explicitly via --volumemounter command-line argument.
  mounter: {{ mounter | default('kernel') }}
reclaimPolicy: {{ reclaim_policy | default('Delete') }}
